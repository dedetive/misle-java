package com.ded.misle.renderer.image;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

import java.awt.*;
import java.util.List;

import static com.ded.misle.core.Path.*;

/**
 * Utility class responsible for saving and loading {@link Palette} objects as image files.
 * <p>
 * This class allows serialization of palettes into PNG images and restoration of those images
 * back into {@code Palette} instances. Each palette is stored as a 1-pixel-high image, where
 * each horizontal pixel represents a color in the palette, preserving index order.
 * <p>
 * Files are saved under the {@link PathTag#PALETTES} path.
 * This class is static and non-instantiable.
 */
public class PaletteCurator {

    /**
     * Private constructor to prevent instantiation.
     */
    private PaletteCurator() {}

    /**
     * Generates a .png image file representing the given palette.
     * <p>
     * The image is written with one row of pixels, where each column represents a color
     * from the palette in order. The file will be named {@code fileName + ".png"} and
     * saved under the directory associated with {@link PathTag#PALETTES}.
     * <p>
     * If the directory does not exist, it is created automatically. Errors are logged.
     *
     * @param palette  the {@link Palette} to serialize into an image file
     * @param fileName the base name of the file (without extension)
     */
    public static void generateFile(Palette palette, String fileName) {
        Path path = getPath(PathTag.PALETTES).resolve(fileName + ".png");

        BufferedImage image = new BufferedImage(palette.size(), 1, BufferedImage.TYPE_INT_ARGB);
        List<Color> asList = palette.asList();

        for (int i = 0; i < asList.size(); i++) {
            image.setRGB(i, 0, asList.get(i).getRGB());
        }

        try {
            Files.createDirectories(path.getParent());
            ImageIO.write(image, "png", path.toFile());
        } catch (IOException e) {
            System.err.println("Failed to save palette image: " + e.getMessage());
        }
    }

    /**
     * Loads a {@link Palette} from a .png file with the given name.
     * <p>
     * The file must exist under the {@link PathTag#PALETTES} directory,
     * and must follow the structure generated by {@link #generateFile(Palette, String)}.
     * If the file does not exist or fails to load, {@code null} is returned and an error is logged.
     *
     * @param paletteName the base name of the palette file (without extension)
     * @return the reconstructed {@link Palette}, or {@code null} if loading fails
     */
    public static Palette getPalette(String paletteName) {
        Path path = getPath(PathTag.PALETTES).resolve(paletteName + ".png");
        BufferedImage output = null;

        try {
            output = ImageIO.read(path.toFile());
        } catch (IOException e) {
            System.err.println("Failed to load palette image: " + e.getMessage());
        }

        return output != null
            ? new Palette(output)
            : null;
    }
}